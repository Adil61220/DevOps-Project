---
- hosts: worker
  become: true
  vars:
    app_dir: /opt/todo-app
    app_image: todo-app:latest
    container_name: todo-app
    network_name: todo_network
    host_port: 1080
    repo_url: https://github.com/Adil61220/DevOps-Project.git

  tasks:
    - name: Remove old Docker installations
      apt:
        name:
          - docker
          - docker.io
          - containerd
          - runc
        state: absent
      when: ansible_os_family == "Debian"

    - name: Install prerequisites
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
          - python3
          - python3-pip
          - git
        update_cache: yes
        state: present
      when: ansible_os_family == "Debian"

    - name: Add Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present
      when: ansible_os_family == "Debian"

    - name: Add Docker repository
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present
        update_cache: yes
      when: ansible_os_family == "Debian"

    - name: Install Docker Engine
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: present
        update_cache: yes
      when: ansible_os_family == "Debian"

    - name: Install Docker Python module
      pip:
        name: docker
        state: present

    - name: Ensure Docker service is running
      service:
        name: docker
        state: started
        enabled: yes

    - name: Add user to docker group
      user:
        name: "{{ ansible_user }}"
        groups: docker
        append: yes

    - name: Create application directory
      file:
        path: "{{ app_dir }}"
        state: directory
        mode: '0755'

    - name: Clone repository
      git:
        repo: "{{ repo_url }}"
        dest: "{{ app_dir }}"
        version: main
        force: yes

    - name: Remove old Docker containers and images
      block:
        - name: Stop and remove existing containers
          docker_container:
            name: "{{ container_name }}"
            state: absent
          ignore_errors: yes

        - name: Remove old images
          docker_image:
            name: "{{ app_image }}"
            state: absent
            force_absent: yes
          ignore_errors: yes

    - name: Build Docker image
      docker_image:
        name: "{{ app_image }}"
        build:
          path: "{{ app_dir }}"
          dockerfile: Dockerfile
        source: build
        force_source: true

    - name: Ensure Docker network exists
      docker_network:
        name: "{{ network_name }}"
        state: present

    - name: Deploy application container
      docker_container:
        name: "{{ container_name }}"
        image: "{{ app_image }}"
        state: started
        restart_policy: unless-stopped
        networks:
          - name: "{{ network_name }}"
        ports:
          - "{{ host_port }}:80"
        env:
          NODE_ENV: production

    - name: Wait for container to be ready
      wait_for:
        host: localhost
        port: "{{ host_port }}"
        timeout: 30
        delay: 10

    - name: Verify deployment
      uri:
        url: "http://localhost:{{ host_port }}"
        return_content: yes
      register: health_check
      until: health_check.status == 200
      retries: 6
      delay: 10
      ignore_errors: yes

    - name: Display deployment status
      debug:
        msg: "Application is now accessible at http://{{ inventory_hostname }}:{{ host_port }}"
      when: health_check.status is defined and health_check.status == 200
